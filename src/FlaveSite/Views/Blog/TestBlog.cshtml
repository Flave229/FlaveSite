@using Microsoft.AspNetCore.Mvc.Rendering

<div class="header-details" @*style="background-image: url(@Model.ImageUrl)"*@></div>
<div class="header-details-content">
    <div class="row" style="top: 50%">
        <div class="col-md-4"></div>
        <div class="col-md-4 header-profile">
            <span class="header-profile-title"> TestPage </span>  
        </div>
        <div class="col-md-4"></div>
    </div>
</div>
@Html.Partial("Navbar")


<div class="container body-content" style="font-family: Arial">
    <h3>Introduction</h3>
There are many ways to create terrain in games programming. One method is to use a pre-made height map containing the height data of a terrain over an area. This tutorial will cover how to use these heightmaps with the the grid we made in <a href="http://www.flave.co.uk/Blog/BlogDetails?blogId=2">this tutorial</a>. If you have not yet generated a grid of any size with any cell count, you will need that to complete this tutorial. I will also not provide any insight to the creation of the heightmaps, going off the assumption you know this/have heightmaps ready for use.
    <br /><br />
    <h3>Theory</h3>
    A heightmap is stored as a simple greyscale image where each pixel represents a height value between 0 and 255. For pixels that are completely black, the height is maximum. For pixels that are completely white, the height is minimum. These values are then projected onto a grid and used to represent the y values. Heightmaps will typically be stored in a .raw file format, but other file extensions could still be valid. We will assume a .raw file format for this tutorial.
    <br /><br />
    <div class="row" style="text-align: center">
        <div class="col-md-1"></div>
        <div class="col-md-10">
            <img src="/images/blog/3-1.png" style="max-width: 60%" />
            <br><br>
            <p style="color: #888888">Figure 1 - An example height map.</p>
        </div>
        <div class="col-md-1"></div>
    </div>
    <h3>Code</h3>
    <h4>Sampling the Heightmap</h4>
    Firstly, we need a method that can extract the height map data from our image. For now, let's build a seperate namespace called <code>HeightMapLoader</code> with a function that can extract that data and return a vector of floats.
    <br/><br/>
    <div class="code-block">
<samp>namespace HeightMapLoader
{
    std::vector&lt;float&gt; LoadHeightMap(char* fileName, int width, int depth, float scale);
}</samp>
    </div>
    <br/>
    <div class="code-block">
<samp>std::vector&lt;float&gt; HeightMapLoader::LoadHeightMap(char* fileName, const int width, const int depth, const float scale)
{
    std::vector&lt;unsigned char&gt; pixelData(width * depth);

    std::ifstream heightMapRaw;
    heightMapRaw.open(fileName, std::ios_base::binary);

    if (heightMapRaw) 
    {
        heightMapRaw.read(reinterpret_cast&lt;char*&gt;(&pixelData[0]), static_cast&lt;std::streamsize&gt;(pixelData.size()));
        heightMapRaw.close();
    }

    std::vector&lt;float&gt; clampedHeightData(depth * width, 0);

    for (int i = 0; i < width * depth; ++i)
        clampedHeightData[i] = pixelData[i] / 255.0f * scale;

    return clampedHeightData;
}</samp>
    </div>
    <br /><br />
    It's worth noting that I intentionally clamp the pixel values down between 0 and 1 to help with scaling later down the line. For example, if I want my terrain to be taller, I can scale the y values by a factor of 10. This is a lot easier to predict and visualise when the values are between 0 and 1.
    <br/><br/>
    The next step is to alter the <code>GridBuilder</code> class we developed in the previous tutorial to handle a height map. We will do this by adding three new methods. <code>BuildWithHeightMap(...)</code> and <code>ApplyHeightMapToVertices(...)</code> will deal with the new heightmap loading. The third method, <code>BuildGridGeometry(...)</code> is simply a method to construct the returned Geometry data, added to avoid code duplication between <code>Build(...)</code> and <code>BuildWithHeightMap(...)</code>.
    <br/><br/>
    <div class="code-block">
<samp>Geometry* GridBuilder::BuildWithHeightMap(const Box gridSize, const XMFLOAT2 cellCount, char* heightMapFileName) const
{
	std::vector&lt;float&gt; heightMapData = HeightMapLoader::LoadHeightMap(heightMapFileName, cellCount.x, cellCount.y);
	vector&lt;Vertex&gt; vertices = BuildVertexList(gridSize, cellCount);
	ApplyHeightMapToVertices(vertices, heightMapData);
	vector&lt;unsigned long&gt; indices = BuildIndexList(cellCount);

	return BuildGridGeometry(vertices, indices, gridSize);
}</samp>
    </div>
    <br/>
    <div class="code-block">
<samp>void GridBuilder::ApplyHeightMapToVertices(std::vector&lt;Vertex&gt;& vertices, std::vector&lt;float&gt;& heightMapData)
{
    for (int i = 0; i < vertices.size(); ++i)
    {
        if (i > heightMapData.size() - 1)
            return;

        vertices.at(i).position.y = heightMapData[i];
    }
}</samp>
    </div>
    <br /><br />
    For now, I have cheated a little bit by simply returning out of the <code>ApplyHeightMapToVertices(...)</code> method if the array exceeds the <code>heightMapData</code> size. This is because, for a 10x10 grid, we will need 11x11 vertices. So when we request a 512x512 grid to match the height map size, we will have 513 x 513 vertices, causing an vector index out of bounds exception when we attempt to apply height map data that was never created. We will tackle this issue later in the tutorial.
    <br /><br />
    I came across an issue when developing this code, where the grid started to break when the cell count was too large. This was to do with the lack of information that could be stored 2 bytes of data, as the index numbers would begin exceeding the maximum possible size. You may remember in the grid tutorial, we constructed the index buffer with a byte width of <code>sizeof(WORD) * static_cast&lt;UINT&gt;(indexCount)</code>. This needs to be changed to a type that is larger than 2 bytes arrays with large index values. In my case, I used <code>LONG</code>, which is 4 bytes. This also required changing the vector array of indices from <code>vector&lt;unsigned short&gt;</code> to <code>vector&lt;unsigned long&gt;</code>. Lastly, with this change, we need to tell DirectX that the input format has changed for the indices, which we do by setting the <code>DXGI_FORMAT</code> to <code>DXGI_FORMAT_R32_UINT</code> (Or equivalent 32 bit value) in <code>IASetIndexBuffer(...)</code>.
    <br/><br/>
    <div class="code-block">
<samp>ID3D11DeviceContext* deviceContext = _direct3D->GetDeviceContext();
deviceContext->IASetVertexBuffers(0, 1, &appearance->Model->VertexBuffer, &appearance->Model->VBStride, &appearance->Model->VBOffset);
deviceContext->IASetIndexBuffer(appearance->Model->IndexBuffer, <b>DXGI_FORMAT_R32_UINT</b>, 0);
deviceContext->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);</samp>
    </div>
    <br /><br />
    And now, to show the terrain with the heightmap applied [Figure 2].
    <br /><br />
    <div class="row" style="text-align: center">
        <div class="col-md-1"></div>
        <div class="col-md-10">
            <img src="/images/blog/3-2.png" style="max-width: 60%" />
            <br><br>
            <p style="color: #888888">Figure 2 - A height map applied to the scene</p>
        </div>
        <div class="col-md-1"></div>
    </div>
    Unimpressed? Let's try scaling the height by 10... [Figure 3].
    <br /><br />
    <div class="row" style="text-align: center">
        <div class="col-md-1"></div>
        <div class="col-md-10">
            <img src="/images/blog/3-3.png" style="max-width: 60%" />
            <br><br>
            <p style="color: #888888">Figure 3 - A height map applied to the scene with adjusted y values.</p>
        </div>
        <div class="col-md-1"></div>
    </div>
    <h3>Extra Work</h3>
    <h4>Normal, Tangent and Binormal Considerations</h4>
    If your application used any normal, tangent or binormal calculations for graphical techniques such as bump or parallax occlusion mapping, the terrain will break for these techniques [Figure 6]. This is due to all the normals pointing upwards [Figure 4], where they instead need to be pointing perpendicular to each polygon face [Figure 5].
    <br /><br />
    <div class="row" style="text-align: center">
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <img src="/images/blog/3-4.png" style="max-width: 60%" />
            <br><br>
            <p style="color: #888888">Figure 4 - Height map slice with incorrect normals.</p>
        </div>
        <div class="col-md-5">
            <img src="/images/blog/3-5.png" style="max-width: 60%" />
            <br><br>
            <p style="color: #888888">Figure 5 - Height map with corrected normals. Note that the red line represent the half way vector between the two normals that would be drawn at each vertex.</p>
        </div>
        <div class="col-md-1"></div>
    </div>
    <br />
    <div class="row" style="text-align: center">
        <div class="col-md-1"></div>
        <div class="col-md-10">
            <img src="/images/blog/3-6.png" style="max-width: 100%" />
            <br><br>
            <p style="color: #888888">Figure 6 - An example of parallax occlusion mapping breaking on the height map terrain.</p>
        </div>
        <div class="col-md-1"></div>
    </div>
    <br /><br />
    To remedy this, we need to calculate the tangents and binormals then recalculate the normals for each vertex. Code for this can be found at Rastertek, if you wish to consult his <a href="http://rastertek.com/dx11tut20.html">Bump Mapping</a> tutorial for the code. Once sorting out the tangets, binormals and normals, parallax occlusion and bump mapping should work a lot better on the terrain.
    <br /><br />
    <div class="row" style="text-align: center">
        <div class="col-md-1"></div>
        <div class="col-md-10">
            <img src="/images/blog/3-7.png" style="max-width: 100%" />
            <br><br>
            <p style="color: #888888">Figure 7 - Terrain with the fixed binormals, tangent and normals.</p>
        </div>
        <div class="col-md-1"></div>
    </div>
    <br />
    <h4>Grid Map Interpolation</h4>
    We previously discussed an issue where we have one more row and column of vertices than we do height map data. A potential fix to this would be to simply change that the <code>cellCount</code> represents the amount of vertices, rather than the amount of cells. This is particularly... unexciting. Let's do grid interpolation instead!
    <br/><br/>
    The concept behind this technique is quite a bit simpler that the implementation. It involves mapping the grid provided by the application onto the heightmap, then samples each nearby pixel on the heightmap with a weighting to each one depending on its distance [Figure 8]. These final pixel values are then interpolated to give the final height value for that vertex on the grid.
    <br /><br />
    <div class="row" style="text-align: center">
        <div class="col-md-1"></div>
        <div class="col-md-10">
            <img src="/images/blog/3-8.gif" style="max-width: 100%" />
            <br><br>
            <p style="color: #888888">Figure 8 - Interpolation on the top row of a grid. Lower rows are more complex to calculate as more pixels need to be sampled across rows.</p>
        </div>
        <div class="col-md-1"></div>
    </div>
    <br /><br/>
    I'm sure the following code can be refactored and simplified somewhat, but here is the Interpolation code for each row. The column interpolation is very simular to this, only it operates on the pixels in a single row. I have excluded it to save space while also giving you something to think about.
    <br/><br/>
    <div class="code-block">
<samp>std::vector&lt;float&gt; InterpolateHeightMap(std::vector&lt;float&gt;& pixelData, const DirectX::XMFLOAT2& cellCount, const Box& heightMapSize)
{
	std::vector&lt;float&gt; interpolatedHeightData;

	for (int row = 0; row &lt; cellCount.y; ++row)
	{
		float heightPosition = (heightMapSize.Height / (cellCount.y + 1)) * row;

		if (heightPosition &lt; 1)
		{
			int rowOneIndex = static_cast&lt;int&gt;(round((heightMapSize.Height / (cellCount.y + 1)) * row)) * heightMapSize.Width;
			int rowTwoIndex = static_cast&lt;int&gt;(round((heightMapSize.Height / (cellCount.y + 1)) * (row + 1))) * heightMapSize.Width;

			vector&lt;float&gt; rowOne = InterpolateHeightMapRow(pixelData, cellCount, heightMapSize, rowOneIndex);
			vector&lt;float&gt; rowTwo;

			if (rowOneIndex == rowTwoIndex)
				rowTwo = rowOne;
			else
				rowTwo = InterpolateHeightMapRow(pixelData, cellCount, heightMapSize, rowTwoIndex);

			for (int column = 0; column &lt; rowOne.size(); ++column)
				interpolatedHeightData.push_back(((rowOne.at(column) * (2 - heightPosition)) + (rowTwo.at(column) * heightPosition)) / 2);
		}
		else if (heightPosition &gt; heightMapSize.Height - 1)
		{
			int rowOneIndex = static_cast&lt;int&gt;(round((heightMapSize.Height / (cellCount.y + 1)) * (row - 1))) * heightMapSize.Width;
			int rowTwoIndex = static_cast&lt;int&gt;(round((heightMapSize.Height / (cellCount.y + 1)) * row)) * heightMapSize.Width;

			vector&lt;float&gt; rowOne = InterpolateHeightMapRow(pixelData, cellCount, heightMapSize, rowOneIndex);
			vector&lt;float&gt; rowTwo;

			if (rowOneIndex == rowTwoIndex)
				rowTwo = rowOne;
			else
				rowTwo = InterpolateHeightMapRow(pixelData, cellCount, heightMapSize, rowTwoIndex);

			for (int column = 0; column &lt; rowOne.size(); ++column)
				interpolatedHeightData.push_back(((rowOne.at(column) * (2 - heightPosition)) + (rowTwo.at(column) * heightPosition)) / 2);
		}
		else
		{
			int rowOneIndex = static_cast&lt;int&gt;(round((heightMapSize.Height / (cellCount.y + 1)) * (row - 1))) * heightMapSize.Width;
			int rowTwoIndex = static_cast&lt;int&gt;(round((heightMapSize.Height / (cellCount.y + 1)) * row)) * heightMapSize.Width;
			int rowThreeIndex = static_cast&lt;int&gt;(round((heightMapSize.Height / (cellCount.y + 1)) * (row + 1))) * heightMapSize.Width;

			vector&lt;float&gt; rowOne = InterpolateHeightMapRow(pixelData, cellCount, heightMapSize, rowOneIndex);
			vector&lt;float&gt; rowTwo;
			vector&lt;float&gt; rowThree;

			if (rowOneIndex == rowTwoIndex)
				rowTwo = rowOne;
			else
				rowTwo = InterpolateHeightMapRow(pixelData, cellCount, heightMapSize, rowTwoIndex);

			if (rowTwoIndex == rowThreeIndex)
				rowThree = rowTwo;
			else
				rowThree = InterpolateHeightMapRow(pixelData, cellCount, heightMapSize, rowThreeIndex);

			const float percentageShare = heightPosition - floor(heightPosition);
			for (int column = 0; column &lt; rowOne.size(); ++column)
				interpolatedHeightData.push_back(((rowOne.at(column) * (1 - percentageShare)) + rowTwo.at(column) + (rowThree.at(column) * percentageShare)) / 2);
		}
	}

	return interpolatedHeightData;
}</samp>
    </div>
    <br /><br />
    <div class="row" style="text-align: center">
        <div class="col-md-1"></div>
        <div class="col-md-10">
            <img src="/images/blog/3-9.png" style="max-width: 100%" />
            <br><br>
            <p style="color: #888888">Figure 9 - 512x512 Heightmap interpolated onto 100x100 grid.</p>
        </div>
        <div class="col-md-1"></div>
    </div>
    <br />
    
    <div class="row" style="text-align: center">
        <div class="col-md-1"></div>
        <div class="col-md-10">
            <img src="/images/blog/3-10.png" style="max-width: 100%" />
            <br><br>
            <p style="color: #888888">Figure 10 - 512x512 Heightmap interpolated onto 789x789 grid.</p>
        </div>
        <div class="col-md-1"></div>
    </div>
</div>

@Html.Partial("MainFooter")